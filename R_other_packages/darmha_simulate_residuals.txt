simulateResiduals
function (fittedModel, n = 250, refit = F, integerResponse = NULL, 
    plot = F, seed = 123, method = c("PIT", "traditional"), ...) 
{
    if (n < 2) 
        stop("error in DHARMa::simulateResiduals: n > 1 is required to calculate scaled residuals")
    checkModel(fittedModel)
    match.arg(method)
    randomState <- getRandomState(seed)
    on.exit({
        randomState$restoreCurrent()
    })
    ptm <- proc.time()
    out = list()
    family = family(fittedModel)
    out$fittedModel = fittedModel
    out$modelClass = class(fittedModel)[1]
    out$nObs = nobs(fittedModel)
    out$nSim = n
    out$refit = refit
    out$methods = method
    out$observedResponse = getObservedResponse(fittedModel)
    if (is.null(integerResponse)) {
        if (family$family %in% c("binomial", "poisson", "quasibinomial", 
            "quasipoisson", "Negative Binom", "nbinom2", "nbinom1", 
            "genpois", "compois", "truncated_poisson", "truncated_nbinom2", 
            "truncated_nbinom1", "betabinomial", "Poisson", "Tpoisson", 
            "COMPoisson", "negbin", "Tnegbin") | grepl("Negative Binomial", 
            family$family)) 
            integerResponse = TRUE
        else integerResponse = FALSE
    }
    out$integerResponse = integerResponse
    out$problems = list()
    if (out$modelClass %in% c("HLfit")) {
        out$fittedPredictedResponse = predict(fittedModel, type = "response", 
            re.form = ~0)[, 1L]
    }
    else {
        out$fittedPredictedResponse = predict(fittedModel, type = "response", 
            re.form = ~0)
    }
    out$fittedFixedEffects = getFixedEffects(fittedModel)
    out$fittedResiduals = residuals(fittedModel, type = "response")
    if (refit == FALSE) {
        out$simulatedResponse = getSimulations(fittedModel, nsim = n, 
            type = "normal", ...)
        checkSimulations(out$simulatedResponse, out$nObs, out$nSim)
        out$scaledResiduals = getQuantile(simulations = out$simulatedResponse, 
            observed = out$observedResponse, integerResponse = integerResponse, 
            method = method)
    }
    else {
        out$refittedPredictedResponse <- matrix(nrow = out$nObs, 
            ncol = n)
        out$refittedFixedEffects <- matrix(nrow = length(out$fittedFixedEffects), 
            ncol = n)
        out$refittedResiduals = matrix(nrow = out$nObs, ncol = n)
        out$refittedPearsonResiduals = matrix(nrow = out$nObs, 
            ncol = n)
        out$simulatedResponse = getSimulations(fittedModel, nsim = n, 
            type = "refit", ...)
        for (i in 1:n) {
            simObserved = out$simulatedResponse[[i]]
            try({
                refittedModel = getRefit(fittedModel, simObserved)
                out$refittedPredictedResponse[, i] = predict(refittedModel, 
                  type = "response")
                out$refittedFixedEffects[, i] = getFixedEffects(refittedModel)
                out$refittedResiduals[, i] = residuals(refittedModel, 
                  type = "response")
                out$refittedPearsonResiduals[, i] = residuals(refittedModel, 
                  type = "pearson")
            }, silent = TRUE)
        }
        if (anyNA(out$refittedResiduals)) 
            warning("DHARMa::simulateResiduals warning: on refit = TRUE, at least one of the refitted models produced an error. Inspect the refitted model values. Results may not be reliable.")
        dup = sum(duplicated(out$refittedFixedEffects, MARGIN = 2))
        if (dup > 0) {
            if (dup < n/3) {
                warning(paste("There were", dup, "of", n, "duplicate parameter estimates in the refitted models. This may hint towards a problem with optimizer convergence in the fitted models. Results may not be reliable. The suggested action is to not use the refitting procedure, and diagnose with tools available for the normal (not refitted) simulated residuals. If you absolutely require the refitting procedure, try changing tolerance / iterations in the optimizer settings."))
            }
            else {
                warning(paste("There were", dup, "of", n, "duplicate parameter estimates in the refitted models. This may hint towards a problem with optimizer convergence in the fitted models. Results are likely not reliable. The suggested action is to not use the refitting procedure, and diagnose with tools available for the normal (not refitted) simulated residuals. If you absolutely require the refitting procedure, try changing tolerance / iterations in the optimizer settings."))
                out$problems[[length(out$problems) + 1]] = "error in refit"
            }
        }
        out$scaledResiduals = getQuantile(simulations = out$refittedResiduals, 
            observed = out$fittedResiduals, integerResponse = integerResponse, 
            method = method)
    }
    out$time = proc.time() - ptm
    out$randomState = randomState
    class(out) = "DHARMa"
    if (plot == TRUE) 
        plot(out)
    return(out)
}