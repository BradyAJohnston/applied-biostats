Most researchers plot unconditional means and standard errors computed on the scale of the response variable. "Unconditional" means th-- that is, the means and standard errors of each group are computed using only the data in that group and are not conditioned on the structure of the fit model, such as covariates. Because researchers make inferences from a model and not raw data, plotting the modeled means and confidence limits is a better practice. Because inferences are typically made from an estimated effect, a plot of the modeled effects and their confidence intervals is an even better practice. There has been recent emphasis on "showing the data" either by superimposing the raw data over the mean and standard error bar or by using plots that summarize the distribution such as box and violin plots. Plotting the data is a good practice as a model check (Chapter xxx) and showing the data in a figure can be a good practice, but little can be inferred from the data or data summary alone and box/violin plots should not replace showing the modeled results.


Count data have distributions that are bound by zero on one side and tend to be skewed due to the occurrence of high counts. Count distributions are covered in chapter xxx; the point here is to make the point that count data, and other biological data with skewed distribution,

```{r ggplot-fd1, echo=FALSE}
n <- 6
a_levels <- c("A-", "A+")
n.a_levels <- length(a_levels)
b_levels <- c("B-", "B+")
n.b_levels <- length(b_levels)
N <- n*n.a_levels*n.b_levels
A <- rep(a_levels, each=n*n.b_levels)
B <- rep(rep(b_levels, each=n), n.a_levels)
X <- model.matrix(~A*B)

beta_0 <- 10^4
beta_1 <- beta_0*2
beta_2 <- -beta_0/2
beta_3 <- beta_0
beta <- c(beta_0, beta_1, beta_2, beta_3)
mu <- X%*%beta

y <- rnegbin(N, mu, theta = 4)
fd <- data.table(y=y, A=A, B=B, treatment=paste(A, B, sep="/"))

ggbarplot(x="treatment", y="y", data=fd, add=c("mean_se"), fill = "steelblue") +
  ylab("Count")

fit.lm <- lm(y ~ A*B, data=fd)
lm.emm <- data.table(summary(emmeans(fit.lm, specs=c("A", "B"))))

fit.nb <- glm.nb(y ~ A*B, data=fd)
nb.emm <- data.table(summary(emmeans(fit.nb, specs=c("A", "B"), type="response")))



```

The design is
```{r}
pd <- position_dodge(0.7)
ggbarplot(x="A",
          y="response",
          fill="B",
          data=fit.lm,
          palette="jco",
          position = pd) +
  ylab("Count") +

  geom_errorbar(aes(x=A, ymin=asymp.LCL, ymax=asymp.UCL, group=B),
                position = pd,
                width=0.15) +

  geom_point(data=fd, aes(x=A, y=y, fill=B),
             position = position_jitterdodge(jitter.width=.1, dodge.width = 0.7),
             color="black") +


  NULL



```

```{r}
fig3a.wide <- data.table(Experiment = rep(c("e1", "e2", "e3"), each=3),
                         Replicate = rep(c("rep1", "rep2", "rep3"), 3),
                         ctl = c(73,47,61,94,94,108,60,54,77),
                         jl = c(118, 80, 91, 109, 156, 125, 99, 85, 100),
                         ID = 1:9
                         )
fig3a <- melt(fig3a.wide, id.vars=c("Experiment", "Replicate", "ID"), variable.name="Treatment", value.name = "count")

t.test(fig3a.wide$ctl, fig3a.wide$jl, paired=TRUE)

fit <- lmer(count ~ Treatment + (1|Experiment), data=fig3a)
coef(summary(fit))

fit <- lmer(count ~ Treatment + (1|ID), data=fig3a)
coef(summary(fit))
summary(fit)

cor(fig3a.wide$ctl, fig3a.wide$jl)
```



## Pretty good plots show the data

```{r ggplot-fake-data, echo=FALSE}
set.seed((2))
n <- 10
b0 <- 10
b1 <- 10
b2 <- 5
b3 <- 10
sigma <- 5
b <- c(b0, b1, b2, b3)
A_levels <- rep(c("a-", "a+"), each=n)
B_levels <- c("b-", "b+")
x <- expand.grid(A=A_levels,B=B_levels)
X <- model.matrix(formula(~A*B), x)
y <- (X%*%b + rnorm(n*4, sd=sigma))[,1]
fd <- data.table(Y=y, x)
fd[, treatment:=factor(paste(A,B,sep="/"), c("a-/b-", "a+/b-", "a-/b+", "a+/b+"))]
fd_sum <- fd[, .(Y=mean(Y), sd=sd(Y)), by=treatment]
```

The first plot combines
1. "Cleveland dot plot" of the group means
2. unconditional 1 SE error bar.
```{r ggplot-cleveland-dotplot1, fig.cap="A simple Cleveland dot plot of group means and standard error. The standard error bars are the unconditional or unmodeled SE."}
ggerrorplot(x="treatment", y="Y", data=fd, add="mean", desc_stat = "mean_se", error.plot = "errorbar")
```


The second plot combines
1. "Cleveland dot plot" of the group means
2. unconditional 1 SE error bar.
3. jittered dots of the raw data points

The advantage of this plot of

```{r ggplot-cleveland-dotplot2, fig.cap="A Cleveland dot plot of group means and standard error.with superimposed dot plot of raw values that \"show the data\"."}
ggerrorplot(x="treatment", y="Y", data=fd, add=c("mean", "jitter"), desc_stat = "mean_se", error.plot = "errorbar")
```

## Even better plots...
### Let interaction plots be interaction plots

The levels of the treatment variable indicate that the experimental design is **factorial** with all four combinations of two factors ($A$ and $B$) each with two treatment levels. The two plots above fail to capture this aspect of the data. There are several ways of doing this, including using different colors or shapes for the different levels of one factor and spatially clustering the levels of one factor within the other on the graph. Additionally, the whole purpose of a factorial design is to measure the interaction effect. The magnitude of the interaction can be qualitatively visualized by comparing the lines connecting the group means among the levels of one factor within a level of the other factor. I don't think ggpubr does this, so here is a function.

```{r echo=FALSE, eval=FALSE}
fd[, A_dummy:=model.matrix(~A, data=fd)[,2]]
ggerrorplot(fd, x = "A",
      y = "Y",
      ylab = "Y",
      desc_stat = "mean_se",
      add = "jitter",
      color="B",
      position = position_dodge(0.8),
      palette = "jco"
      )
ggline(fd, x = "A",
      y = "Y",
      ylab = "Y",
      add = c("mean_se", "jitter"),
      # desc_stat = "mean_se",
      # add = "jitter",
      color="B",
      palette = "jco"
      )+
  NULL



```

```{r ggplot-gg-interaction}
gg_interaction <- function(x, y, random=NULL, data, se="model"){
  # x is a vector of the column labels of categorical variables
  # y is the response column
  # random is a column name of a blocking factor
  # data is a data.frame or data.table
  # se is "model" or "sample"
  dt <- na.omit(data.table(data[, .SD, .SDcols=c(x,y)]))
  fixed_part <- paste(y, "~", paste(x[1], x[2], sep="*"))
  if(is.null(random)){ # linear model
    lm_formula <- formula(fixed_part)
    fit <- lm(lm_formula, data=dt)
  }else{ ## linear mixed model
    random_part <- paste("(1|", random, ")", sep="")
    lmm_formula <- formula(paste(fixed_part, random_part, sep=" + "))
    fit <- lmer(lmm_formula, data=dt)
  }

  # get modeled means and se
  fit.emm <- data.table(summary(emmeans(fit, specs=x)))
  new_names <- c("f1", "f2")
  setnames(fit.emm, old=x, new=new_names)

  # get sampled means and se
  dt_sum <- dt[, .(emmean=mean(get(y)), # conditional mean but giving the name in fit.emm
                   sd=sd(get(y)),
                   SE=sd(get(y))/sqrt(.N)),
               by=.(get(x[1]), get(x[2]))]
  setnames(dt_sum, old=c("get", "get.1"), new=new_names)

  if(se=="model"){dt_sum <- fit.emm}

  pd <- position_dodge(.3)
  gg <- ggplot(data=dt_sum, aes(x=f1, y=emmean, shape=f2, group=f2)) +
    #geom_jitter(position=pd, color='gray', size=2) +
    geom_point(color='black', size=4, position=pd) +
    geom_errorbar(aes(ymin=(emmean-SE), ymax=(emmean+SE)),
                  color='black', width=.2, position=pd) +
    geom_line(position=pd) +
    xlab(x[1]) +
    ylab(y) +
    theme_bw() +
    guides(shape=guide_legend(title=x[2])) +
    theme(axis.title=element_text(size = rel(1.5)),
          axis.text=element_text(size = rel(1.5)),
          legend.title=element_text(size = rel(1.3)),
          legend.text=element_text(size = rel(1.3))) +
    NULL
  return(gg)
}
```

```{r ggplot-gginteractionplot1}
gg_interaction(x=c("A","B"), y="Y", data=fd, se="sample")

```

Figure xxx, with lines connecting cell means, is often called an "interaction plot" and this plot type is common in ecology and organismal biology but not so common in cell biology and physiology. A Harrell plot (see below) is even better for communicating interaction effects.

### Even better plots (continued)...Show the model

The SE error bars above are computed for each group independently. If we are going to bother fitting a model to the data and reporting modeled statistics in the text, it makes sense to also report these modeled statistcs in the figures since...figures should be the center of the paper's universe.

The plots below, use modeled SEs from the the fit model. Think about it like this, the linear model has some error $\varepsilon$ which has some standard deviation $\sigma$. The standard error computed for a group is $\frac{s_k}{\sqrt{n}}$ where $s_k$ is the sampled estimate of $\sigma$ for that group. The modeled SE for a group uses the modeled estimate of $\sigma$ for every group instead of that group's sampled $s_k$. So, if $n$ is the same in each group then the modeled SE is the same for each group. So what is the modeled SE? If is the standard deviation of the residuals of the model $\sqrt{\frac{ss_{residual}}{df_{residual}}}$.

Pretending the four treatment levels are not from a factorial design:

```{r gg_better_mean_plot}

# pretend the four treatment levels are not from a factorial design
fit <- lm(Y~treatment, data=fd)
fit.emm <- data.table(summary(emmeans(fit, specs="treatment")))
fit.emm[, treatment:=factor(treatment, as.character(levels(fd$treatment)))]
# the modeled SE is right there in fit.emm
gg <- ggplot(data=fit.emm, aes(x=treatment, y=emmean)) +
  geom_point(size=3) +
  geom_errorbar(aes(ymin=emmean-SE, ymax=emmean+SE), width=0.2) +
  theme_classic(base_size=14) +
  geom_jitter(data=fd, aes(x=treatment, y=Y), width=0.2) +
  NULL
gg

```

Interaction plot

```{r ggplot-gginteractionplot2}
gg_interaction(x=c("A","B"), y="Y", data=fd, se="model")

```

